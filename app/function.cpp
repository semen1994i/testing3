#include "function.h"


int victory(vector < vector <int> > board)
{

    
    int white = 0;
    int black = 0;
    
    for (int i = 0; i <= 7; i++)
    {
        
        for (int j = 0; j <= 7; j++)
        {
            
            if (board[i][j] < 0)
            {
                black = 1;
            }
            
            if (board[i][j] > 0)
            {
                white = 1;
            }
        }
    }

    if (white == 1 && black == 1)
        return 1;
    
    
    return 0;

}

int move(int oldX, int oldY, int newX, int newY, vector<vector<int> > board)
{

    if((0 <= newX && newX <= 7 && 0 <= newY && newY <= 7) && (abs(newX-oldX) == abs(newY-oldY) && abs(newX - oldX) <= 1) && (abs(newY - oldY) <= 1) &&(board[newX][newY] == 0))
    {
        board[newX][newY] = board[oldX][oldY];
        board[oldX][oldY] = 0;
        return 0;
                
    }

    
    return 1;
}

int checkMove(int  oldX, int  oldY, int  newX, int  newY, vector<vector<int> > board)
{
    
    int futureX = oldX - newX;
    int futureY = oldY - newY;
    int checkForDamk = 0;
    int countOurCheck = 0;
    int absFutX = abs(futureX);

    if(abs(futureX) == abs(futureY) && abs(board[oldY][oldX]) > 1)
    {

        if(futureX < 0 && futureY < 0)
        {

            for(absFutX = abs(futureX); absFutX > 0; absFutX--)
            {

                if(board[oldY+absFutX][oldX+absFutX] != 0 && board[oldY+absFutX][oldX+absFutX] != board[oldY][oldX])
                    
                    checkForDamk++;

            }

            if(checkForDamk > 1|| countOurCheck > 0)
            {
                return 0;
            }
            else
                for(absFutX++; absFutX < abs(futureX); absFutX++)
                    
                    board[oldY+absFutX][oldX+absFutX]=0;
            
        }

        if(futureX < 0 && futureY > 0)
        {

            for(absFutX = abs(futureX); absFutX > 0; absFutX--)
            {

                if(board[oldY-absFutX][oldX+absFutX] != 0 && board[oldY-absFutX][oldX+absFutX] != board[oldY][oldX])
                    
                    checkForDamk++;
                

            }

            if(checkForDamk > 1|| countOurCheck > 0)
                
                return 0;
            

            else
                for(absFutX++; absFutX < abs(futureX); absFutX++)
                    
                    board[oldY-absFutX][oldX+absFutX]=0;
            
            
        }

        if(futureX > 0 && futureY < 0)
        {
            for(absFutX = abs(futureX); absFutX > 0; absFutX--)
            {

                if(board[oldY+absFutX][oldX-absFutX] !=0 && board[oldY+absFutX][oldX-absFutX] != board[oldY][oldX])
                    
                    checkForDamk++;
                

            }

            if(checkForDamk > 1|| countOurCheck > 0)
                
                return 0;
            

            else
                for(absFutX++; absFutX < abs(futureX); absFutX++)
                    
                    board[oldY+absFutX][oldX-absFutX]=0;
            
        }

        if(futureX > 0 && futureY > 0) {
            for(absFutX = abs(futureX); absFutX > 0; absFutX--)
            {

                if(board[oldY-absFutX][oldX-absFutX] != 0 && board[oldY-absFutX][oldX-absFutX] != board[oldY][oldX])
                    
                    checkForDamk++;
                

            }

            if(checkForDamk > 1|| countOurCheck > 0)
                

                return 0;
            

            else
                for(absFutX++; absFutX < abs(futureX); absFutX++)
                    
                    board[oldY-absFutX][oldX-absFutX]=0;
            
        }
        return 1;
    }

    else if(futureX > 0 && futureY > 0)
        
        return 0;
    

    //Влево вверх
    else if(futureX > 0 && futureY < 0)
        
        return 1;
        

    //Влево вниз
    else if(futureX < 0 && futureY > 0)
        
        return 0;

    //Вправо вверх
    else if(futureX < 0 && futureY < 0)
    {
        //Вправо вниз
        if(board[oldY+1][oldX+1] == 0)
        {

            if(newX == (oldX + 1) && newY == (oldY + 1) && (board[oldY][oldX] < 0))
                return 1;
            else return 0;
        }

        else if(board[oldY+1][oldX+1] != 0 && board[oldY+1][oldX+1] != board[oldY][oldX])
        {

            if(newX == (oldX + 2) && newY == (oldY + 2))
            {
                board[oldY + 1][oldX + 1] = 0;
                return 1;
            }

            else return 0;
        }
    }

    //Вправо вниз
    else return 0;
    return 0;

}

int damka(int x, int y, vector<vector<int> > board)
{

    if(board[x][y] > 0 && x == 0)
    {
        
        board[x][y] = 2;
        return 0;
    }

    else if (board[x][y] < 0 && x == 7)
    {
        
        board[x][y] = -2;
        return 0;
    }
    
    return 1;
}

int isBoard(int x, int y)
{
    
    
    if (0 <= x && x <= 7 && 0 <= y && y <= 7)
        return 0;
    else
        return 1;
}






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































int checkers(int x, int y, vector < vector <int> > board)
{

    if (board[x][y] != 0)
        return 0;
    
    else
        return 1;
}
